/* The following code was generated by JFlex 1.6.1 */

import java.lang.*;
import java.io.*;
import java.util.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Analizador.l</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\4\25\0\1\6\1\34\1\15\2\0\1\41\1\33\1\16"+
    "\1\30\1\31\1\37\1\10\1\0\1\12\1\11\1\40\1\1\1\53"+
    "\1\56\1\55\1\57\1\1\1\54\1\1\1\52\1\1\2\0\1\35"+
    "\1\27\1\36\2\0\4\2\1\7\25\2\1\0\1\14\2\0\1\3"+
    "\1\0\1\24\1\50\1\43\1\47\1\22\1\23\1\64\1\46\1\13"+
    "\1\2\1\51\1\25\1\60\1\5\1\44\1\61\1\2\1\20\1\26"+
    "\1\17\1\21\1\42\1\45\1\62\1\63\1\2\1\0\1\32\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\0\1\5\1\2"+
    "\2\0\6\2\1\6\1\7\1\10\1\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\5\2\3\0\1\20"+
    "\1\21\1\22\2\0\1\2\1\23\4\0\12\2\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\10\2\1\1\1\20"+
    "\4\0\1\2\2\32\7\2\1\33\2\2\1\34\10\2"+
    "\4\0\1\35\2\2\1\36\2\2\1\37\1\40\5\2"+
    "\1\41\6\2\1\42\1\43\1\2\1\20\1\0\1\44"+
    "\1\45\1\2\1\46\1\2\1\47\5\2\1\50\1\2"+
    "\1\51\1\2\1\52\1\2\1\0\1\53\1\54\2\2"+
    "\1\55\1\56\1\57\4\2\1\60\1\61\2\2\1\62"+
    "\1\63\1\64\1\2\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u03ba\0\u03ba\0\u03ba\0\u04f8\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\u0173\0\u066b\0\u03ba\0\u03ba\0\u06a0"+
    "\0\u06d5\0\u070a\0\152\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u03ba\0\u03ba\0\u03ba\0\u03ba\0\u03ba\0\u03ba\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u073f\0\u03ba"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\152"+
    "\0\u0eb3\0\u0ee8\0\152\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\152"+
    "\0\u1199\0\u11ce\0\152\0\u1203\0\u1238\0\152\0\152\0\u126d"+
    "\0\u12a2\0\u12d7\0\u130c\0\u1341\0\152\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\152\0\152\0\u14b4\0\u14e9\0\u151e"+
    "\0\152\0\152\0\u1553\0\152\0\u1588\0\152\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\152\0\u16c6\0\152\0\u16fb\0\152"+
    "\0\u1730\0\u1765\0\152\0\152\0\u179a\0\u17cf\0\152\0\152"+
    "\0\152\0\u1804\0\u1839\0\u186e\0\u18a3\0\152\0\152\0\u18d8"+
    "\0\u190d\0\152\0\152\0\152\0\u1942\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\2\3\1\4\1\5\1\4\1\3\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\3\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\3\3\1\37\1\40\1\3\6\2\1\3"+
    "\1\41\3\3\1\0\1\2\1\0\1\42\3\0\1\43"+
    "\1\44\1\45\1\44\1\46\6\0\1\43\27\0\6\2"+
    "\6\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\10\3\13\0\23\3\4\0\3\4\57\0\3\3"+
    "\1\4\1\5\1\4\1\3\3\0\1\3\3\0\10\3"+
    "\13\0\23\3\10\0\1\47\55\0\1\45\50\0\6\45"+
    "\6\0\1\50\7\0\1\51\40\0\6\50\6\0\3\3"+
    "\1\0\1\52\1\0\1\3\3\0\1\3\3\0\4\3"+
    "\1\53\3\3\13\0\23\3\1\0\2\54\2\0\4\54"+
    "\1\0\4\54\1\0\13\54\1\55\32\54\1\0\2\56"+
    "\1\0\5\56\1\0\4\56\1\0\13\56\1\57\32\56"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\1\3\1\60\6\3\13\0\23\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\3\3"+
    "\1\61\4\3\13\0\23\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\62\3\0\10\3\13\0\23\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\6\3\1\63\1\3\13\0\23\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\64\2\3\1\65\1\66\1\3\13\0\2\3\1\67"+
    "\20\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\1\70\7\3\13\0\3\3\1\71\17\3"+
    "\27\0\1\72\154\0\1\73\65\0\1\74\60\0\1\75"+
    "\64\0\1\76\64\0\1\77\36\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\3\3\0\5\3\1\100\2\3"+
    "\13\0\23\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\5\3\1\101\2\3\13\0\2\3"+
    "\1\102\20\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\3\3\1\103\4\3\13\0\23\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\1\3\1\104\6\3\13\0\2\3\1\105\16\3"+
    "\1\106\1\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\5\3\1\107\2\3\13\0\23\3"+
    "\1\0\1\110\50\0\6\110\6\0\1\111\6\0\1\112"+
    "\1\0\1\112\37\0\6\111\6\0\1\45\5\0\1\43"+
    "\1\44\1\0\1\44\1\46\6\0\1\43\27\0\6\45"+
    "\6\0\1\50\1\0\1\113\3\0\1\114\1\0\1\115"+
    "\1\0\1\46\6\0\1\114\27\0\6\50\6\0\1\115"+
    "\50\0\6\115\6\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\1\116\7\3\13\0\23\3\1\0"+
    "\2\54\2\0\4\54\1\0\3\54\1\117\1\0\13\54"+
    "\1\55\32\54\32\0\1\54\33\0\2\56\1\0\5\56"+
    "\1\0\4\56\1\120\13\56\1\57\32\56\32\0\1\56"+
    "\33\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\121\5\3\13\0\23\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\1\122"+
    "\7\3\13\0\23\3\1\0\3\3\1\0\1\123\1\0"+
    "\1\3\3\0\1\3\3\0\10\3\13\0\23\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\3\0\1\3\3\0"+
    "\7\3\1\124\13\0\23\3\1\0\3\3\1\0\1\125"+
    "\1\0\1\3\3\0\1\3\3\0\10\3\13\0\23\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\6\3\1\126\1\3\13\0\23\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\10\3"+
    "\13\0\2\3\1\127\20\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\3\3\0\1\3\1\130\6\3"+
    "\13\0\23\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\1\3\1\131\6\3\13\0\23\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\132"+
    "\3\0\10\3\13\0\23\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\3\3\0\1\3\1\133\6\3"+
    "\13\0\23\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\7\3\1\134\13\0\23\3\1\0"+
    "\3\3\1\0\1\135\1\0\1\3\3\0\1\3\3\0"+
    "\10\3\13\0\16\3\1\136\4\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\4\3\1\137"+
    "\3\3\13\0\23\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\3\3\1\140\4\3\13\0"+
    "\23\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\10\3\13\0\2\3\1\141\20\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\3\0\1\3\3\0"+
    "\1\142\7\3\13\0\23\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\3\3\0\10\3\13\0\1\3"+
    "\1\143\21\3\1\0\1\2\5\0\1\43\1\44\1\45"+
    "\1\44\1\46\6\0\1\43\27\0\6\2\6\0\1\111"+
    "\1\0\1\144\4\0\1\44\1\0\1\44\1\46\36\0"+
    "\6\111\6\0\1\111\50\0\6\111\6\0\1\145\50\0"+
    "\6\145\6\0\1\146\6\0\1\147\1\0\1\147\37\0"+
    "\6\146\6\0\1\115\5\0\1\114\3\0\1\46\6\0"+
    "\1\114\27\0\6\115\6\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\10\3\13\0\10\3\1\150"+
    "\1\151\1\3\1\152\7\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\3\3\0\3\3\1\153\4\3"+
    "\13\0\23\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\154\5\3\13\0\23\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\1\155\7\3\13\0\23\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\3\3\1\156"+
    "\4\3\13\0\23\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\10\3\13\0\1\3\1\157"+
    "\21\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\7\3\1\160\13\0\23\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\5\3"+
    "\1\161\2\3\13\0\23\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\162\3\0\2\3\1\163\5\3"+
    "\13\0\23\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\1\164\7\3\13\0\23\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\3\0\1\3\3\0"+
    "\3\3\1\165\4\3\13\0\23\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\1\166\6\3"+
    "\1\167\13\0\23\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\10\3\13\0\17\3\1\170"+
    "\3\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\3\3\1\171\1\3\1\172\2\3\13\0"+
    "\23\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\5\3\1\173\2\3\13\0\23\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\3\0\1\3\3\0"+
    "\6\3\1\174\1\3\13\0\23\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\3\3\1\175"+
    "\4\3\13\0\23\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\10\3\13\0\7\3\1\176"+
    "\13\3\1\0\1\177\50\0\6\177\6\0\1\50\5\0"+
    "\1\114\1\0\1\115\1\0\1\46\6\0\1\114\27\0"+
    "\6\50\6\0\1\146\1\0\1\200\7\0\1\46\36\0"+
    "\6\146\6\0\1\146\50\0\6\146\6\0\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\10\3\13\0"+
    "\12\3\1\201\10\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\10\3\13\0\14\3\1\202"+
    "\6\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\1\3\1\203\6\3\13\0\23\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\3\0\1\3\3\0"+
    "\10\3\13\0\10\3\1\204\1\205\11\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\3\3"+
    "\1\206\4\3\13\0\23\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\3\3\0\1\207\7\3\13\0"+
    "\23\3\1\0\3\3\1\0\1\210\1\0\1\3\3\0"+
    "\1\3\3\0\10\3\13\0\23\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\10\3\13\0"+
    "\1\3\1\211\21\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\10\3\13\0\1\3\1\212"+
    "\21\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\213\3\0\10\3\13\0\23\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\1\214\7\3"+
    "\13\0\23\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\6\3\1\215\1\3\13\0\23\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\1\3\1\216\6\3\13\0\23\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\217\5\3\13\0\23\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\3\3\0\10\3\13\0\7\3"+
    "\1\220\13\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\5\3\1\221\2\3\13\0\23\3"+
    "\1\0\1\111\6\0\1\44\1\0\1\44\1\46\36\0"+
    "\6\111\6\0\1\222\50\0\6\222\6\0\3\3\1\0"+
    "\1\223\1\0\1\3\3\0\1\3\3\0\10\3\13\0"+
    "\23\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\10\3\13\0\12\3\1\224\10\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\3\0\1\3\3\0"+
    "\10\3\13\0\12\3\1\225\1\226\7\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\10\3"+
    "\13\0\22\3\1\227\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\1\230\7\3\13\0\23\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\10\3\13\0\4\3\1\231\16\3\1\0\3\3"+
    "\1\0\1\232\1\0\1\3\3\0\1\3\3\0\10\3"+
    "\13\0\23\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\3\3\1\233\4\3\13\0\23\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\6\3\1\234\1\3\13\0\23\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\10\3"+
    "\13\0\22\3\1\235\1\0\1\146\11\0\1\46\36\0"+
    "\6\146\6\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\10\3\13\0\15\3\1\236\5\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\3\0\1\3\3\0"+
    "\10\3\13\0\14\3\1\237\6\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\2\3\1\240"+
    "\5\3\13\0\23\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\3\0\1\3\3\0\10\3\13\0\20\3\1\241"+
    "\2\3\1\0\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\1\3\3\0\1\242\7\3\13\0\23\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\1\3\3\0\3\3"+
    "\1\243\4\3\13\0\23\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\3\3\0\1\3\3\0\3\3\1\244\4\3"+
    "\13\0\23\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\1\3\3\0\10\3\13\0\12\3\1\245\10\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\3\0\10\3\13\0\15\3\1\246\5\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6519];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\0\2\1\2\0\7\1\2\11\1\0"+
    "\4\1\3\11\5\1\3\0\1\1\2\11\2\0\2\1"+
    "\4\0\12\1\6\11\12\1\4\0\2\1\1\11\23\1"+
    "\4\0\30\1\1\0\21\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static final int IDENTIFIER=0, INT_LIT = 1, FLOAT_LIT = 2, IMAGINARY_LIT = 3;
public static final int STRING_LIT = 4, TRUE = 5, FALSE = 6,Asig = 7,Parentesisabre = 8;
public static final int Parentesiscierra = 9,Incremento = 10, Disyuncion = 11,And = 12;
public static final int Igualque = 13,Diferente = 14, Menor = 15,Mayor = 16, Menorigual = 17;
public static final int Mayorigual = 18, Suma = 19, Resta = 20,Mul = 21,Div = 22, Modulo = 23;
public static final int Negacion = 24, Direccionmem = 25;
public static final int Var=26,Const=27,Struct=28,Switch=29,Case=30,If=31,Else=32,Default=33,For=34;
public static final int Break=35,Uint8=36,Uint16=37,Int8=38,Int16=39,Int32=40,Float=41,Float64=42,Complex64=43;
public static final int Byte=44,String=45,Bool=46,Continue=47,Return=48,Package=49,Func=50,Defer=51;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return(INT_LIT);
            }
          case 54: break;
          case 2: 
            { return(IDENTIFIER);
            }
          case 55: break;
          case 3: 
            { /*ignorar*/
            }
          case 56: break;
          case 4: 
            { return(Suma);
            }
          case 57: break;
          case 5: 
            { return(Resta);
            }
          case 58: break;
          case 6: 
            { return(Asig);
            }
          case 59: break;
          case 7: 
            { return(Parentesisabre);
            }
          case 60: break;
          case 8: 
            { return(Parentesiscierra);
            }
          case 61: break;
          case 9: 
            { return(Direccionmem);
            }
          case 62: break;
          case 10: 
            { return(Negacion);
            }
          case 63: break;
          case 11: 
            { return(Menor);
            }
          case 64: break;
          case 12: 
            { return(Mayor);
            }
          case 65: break;
          case 13: 
            { return(Mul);
            }
          case 66: break;
          case 14: 
            { return(Div);
            }
          case 67: break;
          case 15: 
            { return(Modulo);
            }
          case 68: break;
          case 16: 
            { return(FLOAT_LIT);
            }
          case 69: break;
          case 17: 
            { return(IMAGINARY_LIT);
            }
          case 70: break;
          case 18: 
            { return(Incremento);
            }
          case 71: break;
          case 19: 
            { return(If);
            }
          case 72: break;
          case 20: 
            { return(Igualque);
            }
          case 73: break;
          case 21: 
            { return(Disyuncion);
            }
          case 74: break;
          case 22: 
            { return(And);
            }
          case 75: break;
          case 23: 
            { return(Diferente);
            }
          case 76: break;
          case 24: 
            { return(Menorigual);
            }
          case 77: break;
          case 25: 
            { return(Mayorigual);
            }
          case 78: break;
          case 26: 
            { return(STRING_LIT);
            }
          case 79: break;
          case 27: 
            { return(For);
            }
          case 80: break;
          case 28: 
            { return(Var);
            }
          case 81: break;
          case 29: 
            { return(Int8);
            }
          case 82: break;
          case 30: 
            { return (TRUE);
            }
          case 83: break;
          case 31: 
            { return(Else);
            }
          case 84: break;
          case 32: 
            { return(Func);
            }
          case 85: break;
          case 33: 
            { return(Case);
            }
          case 86: break;
          case 34: 
            { return(Bool);
            }
          case 87: break;
          case 35: 
            { return(Byte);
            }
          case 88: break;
          case 36: 
            { return(Int16);
            }
          case 89: break;
          case 37: 
            { return(Int32);
            }
          case 90: break;
          case 38: 
            { return(Uint8);
            }
          case 91: break;
          case 39: 
            { return(FALSE);
            }
          case 92: break;
          case 40: 
            { return(Const);
            }
          case 93: break;
          case 41: 
            { return(Defer);
            }
          case 94: break;
          case 42: 
            { return(Break);
            }
          case 95: break;
          case 43: 
            { return(Return);
            }
          case 96: break;
          case 44: 
            { return(Uint16);
            }
          case 97: break;
          case 45: 
            { return(String);
            }
          case 98: break;
          case 46: 
            { return(Struct);
            }
          case 99: break;
          case 47: 
            { return(Switch);
            }
          case 100: break;
          case 48: 
            { return(Float64);
            }
          case 101: break;
          case 49: 
            { return(Float);
            }
          case 102: break;
          case 50: 
            { return(Default);
            }
          case 103: break;
          case 51: 
            { return(Package);
            }
          case 104: break;
          case 52: 
            { return(Continue);
            }
          case 105: break;
          case 53: 
            { return(Complex64);
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
